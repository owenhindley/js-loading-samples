/**
 * Copyright (c) 2014,2015 Enzien Audio, Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE SECTION6 HEAVY COMPILER.
 */

/*
 * Heavy Javascript Wrapper
 */
(function(window) {

  /*
   * @param (Object) options
   *   @param options.sampleRate (Number) audio sample rate
   *   @param options.blockSize (Number) number of samples to process in each iteration
   *   @param options.printHook (Function) function callback on Heavy context prints
   *   @param options.sendHook (Function) function callback on Heavy context message sends
   */
  var samplePlayerLib = function(options) {
    this.sampleRate = options.sampleRate || 44100.0;
    this.blockSize = options.blockSize || 2048;
    this.sendHook = Runtime.addFunction(options.sendHook);

    // create temporary message for parameter inputs
    this.tempMessage = Module._malloc(_hv_msg_getByteSize(1));
    _hv_msg_init(this.tempMessage, 1, 0.0);

    // instantiate heavy context
    this.heavyContext = _hv_samplePlayer_new(this.sampleRate);
    this.setPrintHook(options.printHook);

    // allocate temporary buffers (pointer size is 4 bytes in javascript)
    var lengthInSamples = this.blockSize * this.getNumOutputChannels();
    this.processBuffer = new Float32Array(
        Module.HEAPF32.buffer,
        Module._malloc(lengthInSamples * 4),
        lengthInSamples);
  };

  samplePlayerLib.prototype.process = function(event) {
      _hv_samplePlayer_process_inline(
        this.heavyContext,
        null,
        this.processBuffer.byteOffset,
        this.blockSize);

      for (var i = 0; i < this.getNumOutputChannels(); ++i) {
        var output = event.outputBuffer.getChannelData(i);

        var offset = i * this.blockSize;
        for (var j = 0; j < this.blockSize; ++j) {
          output[j] = this.processBuffer[offset+j];
        }
      }
  };

  samplePlayerLib.prototype.getNumInputChannels = function() {
    return (this.heavyContext) ? _hv_getNumInputChannels(this.heavyContext) : -1;
  };

  samplePlayerLib.prototype.getNumOutputChannels = function() {
    return (this.heavyContext) ? _hv_getNumOutputChannels(this.heavyContext) : -1;
  };

  samplePlayerLib.prototype.setPrintHook = function(hook) {
    if (!this.heavyContext) console.error("Can't set Print Hook, no Heavy Context instantiated");

    if (hook) {
      // Converts Heavy print callback to a printable message
      var printHook = Runtime.addFunction(function(timeStamp, printName, msg, userData) {
          var m = ("(" + timeStamp.toFixed(2) + ") " + Pointer_stringify(printName) + ": " + Pointer_stringify(msg));
          hook(m);
        }
      );
      _hv_setPrintHook(this.heavyContext, printHook);
    }
  };

  samplePlayerLib.prototype.setSendHook = function(sendHook) {
    if (!this.heavyContext) console.error("Can't set Send Hook, no Heavy Context instantiated");
  };

  samplePlayerLib.prototype.sendBangToReceiver = function(receiverName) {
    if (this.heavyContext) {
      var r = allocate(intArrayFromString(receiverName), 'i8', ALLOC_STACK);
      _hv_vscheduleMessageForReceiver(this.heavyCtx, r, 0.0, "b");
    }
  };

  samplePlayerLib.prototype.sendFloatToReceiver = function(receiverName, floatValue) {
    if (this.heavyContext) {
      var r = allocate(intArrayFromString(receiverName), 'i8', ALLOC_STACK);
      _hv_msg_setFloat(this.tempMessage, 0, parseFloat(floatValue));
      _hv_scheduleMessageForReceiver(this.heavyContext, r, 0.0, this.tempMessage);
    }
  };

  samplePlayerLib.prototype.sendStringToReceiver = function(receiverName, message) {
    if (this.heavyContext) {
      var r = allocate(intArrayFromString(receiverName), 'i8', ALLOC_STACK);
      var m = allocate(intArrayFromString(message), 'i8', ALLOC_STACK);
      _hv_vscheduleMessageForReceiver(this.heavyCtx, r, 0.0, "s", m);
    }
  };

  window.samplePlayerLib = samplePlayerLib;

})(window);